pipeline {
    agent any // Runs on any available agent

    environment {
        // Define environment variables here
        NODE_ENV = 'production'
        BUILD_DIR = 'build'
    }

    tools {
        // Specify tools needed for the build, e.g., NodeJS
        nodejs 'NodeJS' // Assuming you have a NodeJS tool configured in Jenkins
    }

    stages {
        stage('Checkout') {
            steps {
                // Check out the code from the repository
                checkout scm
            }
        }

        stage('Build') {
            steps {
                // Run build commands
                echo 'Building...'
                sh 'npm install'
                sh 'npm run build'
            }
        }

        stage('Docker Build') {
            steps {
                dir('../app') {
                    // Change directory to where Dockerfile is located
                    echo 'Building Docker image...'
                    sh 'docker build -t my-app-image .'
                }
            }
        }

        stage('Docker Run') {
            steps {
                dir('../app') {
                    // Change directory to where Dockerfile is located
                    echo 'Running Docker container...'
                    sh 'docker run --rm -d -p 3000:3000 my-app-image'
                }
            }
        }

        stage('Archive Artifacts') {
            steps {
                // Archive build artifacts for later use
                echo 'Archiving artifacts...'
                archiveArtifacts artifacts: "${env.BUILD_DIR}/**", allowEmptyArchive: true
            }
        }

        stage('Deploy') {
            steps {
                // Deploy the build artifact
                echo 'Deploying...'
                sh 'npm run deploy'
            }
        }
    }

    post {
        always {
            // Actions to always run, e.g., clean up
            echo 'Cleaning up...'
            sh 'docker system prune -f' // Optional: Clean up unused Docker images and containers
        }
        success {
            // Actions to run on successful build
            echo 'Build was successful!'
        }
        failure {
            // Actions to run on failed build
            echo 'Build failed!'
        }
        unstable {
            // Actions to run if the build is unstable
            echo 'Build is unstable!'
        }
    }
}
